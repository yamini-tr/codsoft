import java.util.*;
import java.io.*;

class Student {
    private String name;
    private int rollNumber;
    private String grade;

    public Student(String name, int rollNumber, String grade) {
        this.name = name;
        this.rollNumber = rollNumber;
        this.grade = grade;
    }

    public int getRollNumber() {
        return rollNumber;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setGrade(String grade) {
        this.grade = grade;
    }

    public String toString() {
        return "Name: " + name + ", Roll No: " + rollNumber + ", Grade: " + grade;
    }
}

public class StudentManagementSystem {
    private static List<Student> students = new ArrayList<>();
    private static final String FILE_NAME = "students.txt";

    public static void main(String[] args) {
        loadStudents();

        Scanner sc = new Scanner(System.in);
        int choice;

        do {
            System.out.println("\n--- Student Management System ---");
            System.out.println("1. Add Student");
            System.out.println("2. Remove Student");
            System.out.println("3. Search Student");
            System.out.println("4. Display All Students");
            System.out.println("5. Edit Student");
            System.out.println("6. Exit");
            System.out.print("Enter your choice: ");
            choice = sc.nextInt();

            switch (choice) {
                case 1: addStudent(sc); break;
                case 2: removeStudent(sc); break;
                case 3: searchStudent(sc); break;
                case 4: displayStudents(); break;
                case 5: editStudent(sc); break;
                case 6: saveStudents(); System.out.println("Exiting..."); break;
                default: System.out.println("Invalid choice.");
            }
        } while (choice != 6);

        sc.close();
    }

    static void addStudent(Scanner sc) {
        System.out.print("Enter name: ");
        sc.nextLine();  // consume newline
        String name = sc.nextLine();

        System.out.print("Enter roll number: ");
        int rollNumber = sc.nextInt();

        System.out.print("Enter grade: ");
        sc.nextLine(); // consume newline
        String grade = sc.nextLine();

        students.add(new Student(name, rollNumber, grade));
        System.out.println("Student added successfully!");
    }

    static void removeStudent(Scanner sc) {
        System.out.print("Enter roll number to remove: ");
        int roll = sc.nextInt();

        boolean removed = students.removeIf(s -> s.getRollNumber() == roll);
        if (removed) {
            System.out.println("Student removed.");
        } else {
            System.out.println("Student not found.");
        }
    }

    static void searchStudent(Scanner sc) {
        System.out.print("Enter roll number to search: ");
        int roll = sc.nextInt();

        for (Student s : students) {
            if (s.getRollNumber() == roll) {
                System.out.println("Student Found: " + s);
                return;
            }
        }
        System.out.println("Student not found.");
    }

    static void editStudent(Scanner sc) {
        System.out.print("Enter roll number to edit: ");
        int roll = sc.nextInt();

        for (Student s : students) {
            if (s.getRollNumber() == roll) {
                System.out.print("Enter new name: ");
                sc.nextLine();
                String name = sc.nextLine();

                System.out.print("Enter new grade: ");
                String grade = sc.nextLine();

                s.setName(name);
                s.setGrade(grade);
                System.out.println("Student updated.");
                return;
            }
        }
        System.out.println("Student not found.");
    }

    static void displayStudents() {
        if (students.isEmpty()) {
            System.out.println("No students found.");
        } else {
            System.out.println("--- Student List ---");
            for (Student s : students) {
                System.out.println(s);
            }
        }
    }

    static void saveStudents() {
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(FILE_NAME))) {
            for (Student s : students) {
                bw.write(s.toString());
                bw.newLine();
            }
        } catch (IOException e) {
            System.out.println("Error saving students: " + e.getMessage());
        }
    }

    static void loadStudents() {
        File file = new File(FILE_NAME);
        if (!file.exists()) return;

        try (BufferedReader br = new BufferedReader(new FileReader(FILE_NAME))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(", ");
                String name = parts[0].split(": ")[1];
                int roll = Integer.parseInt(parts[1].split(": ")[1]);
                String grade = parts[2].split(": ")[1];
                students.add(new Student(name, roll, grade));
            }
        } catch (IOException e) {
            System.out.println("Error loading students: " + e.getMessage());
        }
    }
}
